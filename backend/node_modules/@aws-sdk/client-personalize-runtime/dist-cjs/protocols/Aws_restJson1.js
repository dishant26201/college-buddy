"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.de_GetRecommendationsCommand = exports.de_GetPersonalizedRankingCommand = exports.se_GetRecommendationsCommand = exports.se_GetPersonalizedRankingCommand = void 0;
const protocol_http_1 = require("@aws-sdk/protocol-http");
const smithy_client_1 = require("@aws-sdk/smithy-client");
const models_0_1 = require("../models/models_0");
const PersonalizeRuntimeServiceException_1 = require("../models/PersonalizeRuntimeServiceException");
const se_GetPersonalizedRankingCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {
        "content-type": "application/json",
    };
    const resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` + "/personalize-ranking";
    let body;
    body = JSON.stringify({
        ...(input.campaignArn != null && { campaignArn: input.campaignArn }),
        ...(input.context != null && { context: se_Context(input.context, context) }),
        ...(input.filterArn != null && { filterArn: input.filterArn }),
        ...(input.filterValues != null && { filterValues: se_FilterValues(input.filterValues, context) }),
        ...(input.inputList != null && { inputList: se_InputList(input.inputList, context) }),
        ...(input.userId != null && { userId: input.userId }),
    });
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "POST",
        headers,
        path: resolvedPath,
        body,
    });
};
exports.se_GetPersonalizedRankingCommand = se_GetPersonalizedRankingCommand;
const se_GetRecommendationsCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {
        "content-type": "application/json",
    };
    const resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` + "/recommendations";
    let body;
    body = JSON.stringify({
        ...(input.campaignArn != null && { campaignArn: input.campaignArn }),
        ...(input.context != null && { context: se_Context(input.context, context) }),
        ...(input.filterArn != null && { filterArn: input.filterArn }),
        ...(input.filterValues != null && { filterValues: se_FilterValues(input.filterValues, context) }),
        ...(input.itemId != null && { itemId: input.itemId }),
        ...(input.numResults != null && { numResults: input.numResults }),
        ...(input.promotions != null && { promotions: se_PromotionList(input.promotions, context) }),
        ...(input.recommenderArn != null && { recommenderArn: input.recommenderArn }),
        ...(input.userId != null && { userId: input.userId }),
    });
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "POST",
        headers,
        path: resolvedPath,
        body,
    });
};
exports.se_GetRecommendationsCommand = se_GetRecommendationsCommand;
const de_GetPersonalizedRankingCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_GetPersonalizedRankingCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
    if (data.personalizedRanking != null) {
        contents.personalizedRanking = de_ItemList(data.personalizedRanking, context);
    }
    if (data.recommendationId != null) {
        contents.recommendationId = (0, smithy_client_1.expectString)(data.recommendationId);
    }
    return contents;
};
exports.de_GetPersonalizedRankingCommand = de_GetPersonalizedRankingCommand;
const de_GetPersonalizedRankingCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidInputException":
        case "com.amazonaws.personalizeruntime#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.personalizeruntime#ResourceNotFoundException":
            throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: PersonalizeRuntimeServiceException_1.PersonalizeRuntimeServiceException,
                errorCode,
            });
    }
};
const de_GetRecommendationsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_GetRecommendationsCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
    if (data.itemList != null) {
        contents.itemList = de_ItemList(data.itemList, context);
    }
    if (data.recommendationId != null) {
        contents.recommendationId = (0, smithy_client_1.expectString)(data.recommendationId);
    }
    return contents;
};
exports.de_GetRecommendationsCommand = de_GetRecommendationsCommand;
const de_GetRecommendationsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidInputException":
        case "com.amazonaws.personalizeruntime#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.personalizeruntime#ResourceNotFoundException":
            throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: PersonalizeRuntimeServiceException_1.PersonalizeRuntimeServiceException,
                errorCode,
            });
    }
};
const map = smithy_client_1.map;
const de_InvalidInputExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    if (data.message != null) {
        contents.message = (0, smithy_client_1.expectString)(data.message);
    }
    const exception = new models_0_1.InvalidInputException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body);
};
const de_ResourceNotFoundExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    if (data.message != null) {
        contents.message = (0, smithy_client_1.expectString)(data.message);
    }
    const exception = new models_0_1.ResourceNotFoundException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body);
};
const se_Context = (input, context) => {
    return Object.entries(input).reduce((acc, [key, value]) => {
        if (value === null) {
            return acc;
        }
        acc[key] = value;
        return acc;
    }, {});
};
const se_FilterValues = (input, context) => {
    return Object.entries(input).reduce((acc, [key, value]) => {
        if (value === null) {
            return acc;
        }
        acc[key] = value;
        return acc;
    }, {});
};
const se_InputList = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return entry;
    });
};
const se_Promotion = (input, context) => {
    return {
        ...(input.filterArn != null && { filterArn: input.filterArn }),
        ...(input.filterValues != null && { filterValues: se_FilterValues(input.filterValues, context) }),
        ...(input.name != null && { name: input.name }),
        ...(input.percentPromotedItems != null && { percentPromotedItems: input.percentPromotedItems }),
    };
};
const se_PromotionList = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return se_Promotion(entry, context);
    });
};
const de_ItemList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return de_PredictedItem(entry, context);
    });
    return retVal;
};
const de_PredictedItem = (output, context) => {
    return {
        itemId: (0, smithy_client_1.expectString)(output.itemId),
        promotionName: (0, smithy_client_1.expectString)(output.promotionName),
        score: (0, smithy_client_1.limitedParseDouble)(output.score),
    };
};
const deserializeMetadata = (output) => ({
    httpStatusCode: output.statusCode,
    requestId: output.headers["x-amzn-requestid"] ?? output.headers["x-amzn-request-id"] ?? output.headers["x-amz-request-id"],
    extendedRequestId: output.headers["x-amz-id-2"],
    cfId: output.headers["x-amz-cf-id"],
});
const collectBody = (streamBody = new Uint8Array(), context) => {
    if (streamBody instanceof Uint8Array) {
        return Promise.resolve(streamBody);
    }
    return context.streamCollector(streamBody) || Promise.resolve(new Uint8Array());
};
const collectBodyString = (streamBody, context) => collectBody(streamBody, context).then((body) => context.utf8Encoder(body));
const isSerializableHeaderValue = (value) => value !== undefined &&
    value !== null &&
    value !== "" &&
    (!Object.getOwnPropertyNames(value).includes("length") || value.length != 0) &&
    (!Object.getOwnPropertyNames(value).includes("size") || value.size != 0);
const parseBody = (streamBody, context) => collectBodyString(streamBody, context).then((encoded) => {
    if (encoded.length) {
        return JSON.parse(encoded);
    }
    return {};
});
const parseErrorBody = async (errorBody, context) => {
    const value = await parseBody(errorBody, context);
    value.message = value.message ?? value.Message;
    return value;
};
const loadRestJsonErrorCode = (output, data) => {
    const findKey = (object, key) => Object.keys(object).find((k) => k.toLowerCase() === key.toLowerCase());
    const sanitizeErrorCode = (rawValue) => {
        let cleanValue = rawValue;
        if (typeof cleanValue === "number") {
            cleanValue = cleanValue.toString();
        }
        if (cleanValue.indexOf(",") >= 0) {
            cleanValue = cleanValue.split(",")[0];
        }
        if (cleanValue.indexOf(":") >= 0) {
            cleanValue = cleanValue.split(":")[0];
        }
        if (cleanValue.indexOf("#") >= 0) {
            cleanValue = cleanValue.split("#")[1];
        }
        return cleanValue;
    };
    const headerKey = findKey(output.headers, "x-amzn-errortype");
    if (headerKey !== undefined) {
        return sanitizeErrorCode(output.headers[headerKey]);
    }
    if (data.code !== undefined) {
        return sanitizeErrorCode(data.code);
    }
    if (data["__type"] !== undefined) {
        return sanitizeErrorCode(data["__type"]);
    }
};
